%hListTargetPDSCHs Target PDSCH configurations generation for EVM measurement
%   [PDSCHARRAY,TARGETRNTIS,CARRIER] = hListTargetPDSCHs(WAVECFG,RESOURCESINFO,RNTISET,BWPID)
%   generates list of target PDSCH configurations, PDSCHARRAY, to measure
%   EVM in shared channels given the parameters in WAVECFG and
%   RESOURCESINFO. WAVECFG contains carrier and cell related parameters
%   RESOURCESINFO is a structure array of slot-wise PDSCH resources. The
%   list of considered RNTIs is returned in output argument TARGETRNTIS.
%   CARRIER is a carrier specific configuration object, as described in <a
%   href="matlab:help('nrCarrierConfig')">nrCarrierConfig</a> Optional
%   input, RNTISET, is the list of target RNTIs to decode. If not
%   specified, the list is autogenerated, based on TS 38.141-1 and TS
%   38.141-2. BWPID is the bandwidth part index. If not specified, BWPID is
%   set to 1

%   Copyright 2019-2021 The MathWorks, Inc.

function [pdschArray,targetRNTIs,carrier] = hListTargetPDSCHs(varargin)

    narginchk(2,4);
    waveCfg = varargin{1};
    resourcesInfo = varargin{2};
    bwpId = 1;
    if nargin > 2
        RNTISet = varargin{3};
        if nargin == 4
            bwpId = varargin{4};
        end
    end
    if nargin <= 2 || isempty(RNTISet) % No optional inputs
        % Locate a waveform name label describing the waveform
        name = "No name label found";
        if isfield(waveCfg,'Label') || isprop(waveCfg,'Label')
            name = waveCfg.Label;
        elseif isfield(waveCfg,'Name')
            name = waveCfg.Name;
        elseif isfield(resourcesInfo,'Label')
            name = resourcesInfo.Label;
        end
        FR1_TM = ["NR-FR1-TM1.1", "NR-FR1-TM1.2", "NR-FR1-TM2", "NR-FR1-TM2a",...
            "NR-FR1-TM3.1","NR-FR1-TM3.1a","NR-FR1-TM3.2", "NR-FR1-TM3.3"];
        FR2_TM = ["NR-FR2-TM1.1", "NR-FR2-TM2", "NR-FR2-TM2a","NR-FR2-TM3.1",...
            "NR-FR2-TM3.1a"];
        FR1_FRC_DL =["DL-FRC-FR1-QPSK" "DL-FRC-FR1-64QAM" "DL-FRC-FR1-256QAM"];
        FR2_FRC_DL = ["DL-FRC-FR2-QPSK" "DL-FRC-FR2-16QAM" "DL-FRC-FR2-64QAM"];

        switch name
            case {FR1_TM(5) FR1_TM(6) FR2_TM(4) FR2_TM(5)}
                targetRNTIs = [0 2];
            case {FR1_TM(7) FR1_TM(8)}
                targetRNTIs = 1;
            case {FR1_TM(2) FR1_TM(3) FR1_TM(4) FR2_TM(2) FR2_TM(3)}
                targetRNTIs = 2;
            case {FR1_TM(1) FR2_TM(1),...                            % TM1.1 (FR1, FR2)
                  FR1_FRC_DL(1) FR1_FRC_DL(2) FR1_FRC_DL(3),...      % FRC - FR1
                  FR2_FRC_DL(1) FR2_FRC_DL(2) FR2_FRC_DL(3)}         % FRC - FR2
                targetRNTIs = 0;
            otherwise
                error("The specified waveform name (" + name +...
                    ") is not recognized. It should be in the set: " +...
                    join(FR1_TM,", ") + ", " + join(FR2_TM,", ") + ", " +...
                    join(FR1_FRC_DL,", ") + ", " + join(FR2_FRC_DL,", ") + ".");
        end
    else
        targetRNTIs = RNTISet;
    end

    % Identify the SCS carrier in use
    if isstruct(waveCfg)
        gridsize = waveCfg.Carriers.NRB;
        gridstart = waveCfg.Carriers.RBStart;
        cp = waveCfg.BWP.CyclicPrefix;
        scs = waveCfg.Carriers.SubcarrierSpacing;
    else
        % Get a copy of the SCS carrier configuration associated with the BWP numerology
        carrierID = nr5g.internal.wavegen.getCarrierIDByBWPIndex( waveCfg.SCSCarriers, waveCfg.BandwidthParts, bwpId);

        gridsize = waveCfg.SCSCarriers{carrierID}.NSizeGrid;
        gridstart = waveCfg.SCSCarriers{carrierID}.NStartGrid;
        cp = waveCfg.BandwidthParts{bwpId}.CyclicPrefix;
        scs = waveCfg.SCSCarriers{carrierID}.SubcarrierSpacing;
    end

    % Create carrier resource grid configuration for synchronization and OFDM demodulation
    carrier = nrCarrierConfig;
    carrier.NCellID = waveCfg.NCellID;
    carrier.NSizeGrid = gridsize;
    carrier.NStartGrid = gridstart;
    carrier.SubcarrierSpacing = scs;
    carrier.CyclicPrefix = cp;

    % Identify the measurement target PDSCH using the RNTI
    pdschArray = []; % Contains the PDSCH structures for the considered shared channels

    % Copy the input parameters into an array
    if iscell(waveCfg.PDSCH)
        pdschDefs = [waveCfg.PDSCH{:}];
    else
        pdschDefs = waveCfg.PDSCH;
    end

    for n = 1:length(pdschDefs)
        if any(pdschDefs(n).RNTI == targetRNTIs(:)) && pdschDefs(n).BandwidthPartID == waveCfg.BandwidthParts{bwpId}.BandwidthPartID % Present RNTI included in target list and bwpId
            ri = resourcesInfo.PDSCH(n);
            ri.PDSCH = pdschDefs(n);
            pdschArray = [pdschArray ri]; %#ok<AGROW>
        end
    end


    if isempty(pdschArray)
        warning('Given list of RNTIs are not present in PDSCH config, using RNTI from first valid config.');
        pdschArray = [];
        targetRNTIs = [];
        if isempty(pdschDefs)
            return;
        end
        pIdx = find([pdschDefs(:).BandwidthPartID] == waveCfg.BandwidthParts{bwpId}.BandwidthPartID,1);
        if isempty(pIdx)
           return;
        end
        ri = resourcesInfo.PDSCH(pIdx);
        ri.PDSCH = pdschDefs(pIdx);
        pdschArray = [pdschArray ri];
    end
end